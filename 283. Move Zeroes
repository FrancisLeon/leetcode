Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.
For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.

Idea: cur iterator is to iterate the whole array. Only if nums[cur]>0, we will then swap the nums[cur] and nums[last]
Referance: https://discuss.leetcode.com/topic/24745/c-accepted-code

version 1:
public class Solution 
{
    public void moveZeroes(int[] nums) 
    {
       int last = 0;
       int tmp = 0;
       for (int cur=0; cur < nums.length; cur++)
       {
          if (nums[cur]>0)
          {
              tmp = nums[last];
              nums[last] = nums[cur];
              nums[cur] = tmp;
              last++;
          }
       }
    }
}

iterations: input [0, 1, 0, 3, 12], last 0, cur 0
1st iteration: [0, 1, 0, 3, 12], last 0, cur 1
2nd iteration: [1, 0, 0, 3, 12], last 1, cur 2
3rd iteration: [1, 0, 0, 3, 12], last 1, cur 3
4th iteration: [1, 3, 0, 0, 12], last 2, cur 4
5th iteration: [1, 3, 12, 0, 0], last 3, cur 5

so from the iterations, I find that nums[cur]>0 always swap with the first zero. And the nums before last are all not zero.

problem1: when number is negative, output will be wrong!
solution: modify the condition: if (nums[cur]>0)

version 2:

public class Solution 
{
    public void moveZeroes(int[] nums) 
    {
       int last = 0;
       int tmp = 0;
       for (int cur=0; cur < nums.length; cur++)
       {
          if (nums[cur] != 0)
          {
              tmp = nums[last];
              nums[last] = nums[cur];
              nums[cur] = tmp;
              last++;
          }
       }
    }
}
