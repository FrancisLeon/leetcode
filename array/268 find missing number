Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:

Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

题目大意：
给定一个包含从0, 1, 2, ..., n, 选出的n个不同数字的数组，从中找出数组中缺失的那一个数。

例如，
给定 nums = [0, 1, 3] 返回2。

注意：

你的算法应该满足线性时间复杂度。你可以只使用常数空间复杂度完成此题吗？

解题思路：
解法I：等差数列前n项和 - 数组之和
version 1:
public class Solution 
{
    public int missingNumber(int[] nums) 
    {
        int sum = 0;
        int lastNum = nums[0] + nums.length;
        int realSum = (nums[0] + lastNum)/2*(nums.length+1);
        for (int i = 0; i < nums.length; i++)
        {
          sum += nums[i];   
        }
        return realSum-sum;
    }
}
problem1: input: [0] output: [1] expected: [0]
reason: int 1/2 = 0;
solution: realSum = (nums[0] + lastNum)*(nums.length+1)/2;

version 2:
public class Solution 
{
    public int missingNumber(int[] nums) 
    {
        int sum = 0;
        int lastNum = nums[0] + nums.length;
        int realSum = (nums[0] + lastNum)*(nums.length+1)/2;
        for (int i = 0; i < nums.length; i++)
        {
          sum += nums[i];   
        }
        return realSum-sum;
    }
}
problem 2: input: [1] output: [2] expected: [0]
reason: the first number should be 0;
solution: lastNum = 0 + nums.length;

version 3:
public class Solution 
{
    public int missingNumber(int[] nums) 
    {
        int sum = 0;
        int firstNum = 0;
        int lastNum = 0 + nums.length;
        int realSum = (firstNum + lastNum)*(nums.length+1)/2;
        for (int i = 0; i < nums.length; i++)
        {
          sum += nums[i];   
        }
        return realSum-sum;
    }
}
 
