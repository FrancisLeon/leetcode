title: Given an array of integers, return the 3rd Maximum Number in this array, if it doesn't exist, return the Maximum Number. 
The time complexity must be O(n) or less.

题目大意：
给定一个整数数组，返回数组中第3大的数，如果不存在，则返回最大的数字。时间复杂度应该是O(n)或者更少。

解题思路：
利用变量a, b, c分别记录数组第1,2,3大的数字
遍历一次数组即可，时间复杂度O(n)
难点： 如何初始化 第一大、第二大、第三大的数，
我参考了下别人的代码 http://www.cnblogs.com/grandyang/p/5983113.html
利用Integer.MIN_VALUE 来初始化
version1:

public class Solution 
{
    public int thirdMax(int[] nums) 
    {
        // how to initialize correctly?
        int first = Integer.MIN_VALUE;
        int second = Integer.MIN_VALUE;
        int third = Integer.MIN_VALUE;
        int result = Integer.MIN_VALUE;
        for (int i=0; i< nums.length; i++)
        {
          if (nums[i] > first) // condition 1
          {
              first = nums[i];
              second = first;
              third = second;
          }
          else if (first > nums[i] && nums[i] > second) // condition 2
          {
              second = nums[i];
              third = second;
          }
          else if (second > nums[i] && nums[i] > third) // condition 3
          {
              third = nums[i];
          }
          result = third;
        }
        
        if (third == Integer.MIN_VALUE || third == second) result = first;
        return result; 
    }
}

problem1: input [1,2,3] expected answer: 1; my answer: 3;
solution: the order of assignments is crucial to renew the first, second, third:  

case1:
              first = nums[i];
              second = first;
              third = second;
        
case2:     
              third = second;
              second = first;
              first = nums[i];
              
In case1: the result is all nums[i]; but in the case2: old value of second will be saved in third.

version2:
public class Solution 
{
    public int thirdMax(int[] nums) 
    {
        // how to initialize correctly?
        int first = Integer.MIN_VALUE;
        int second = Integer.MIN_VALUE;
        int third = Integer.MIN_VALUE;
        for (int i=0; i< nums.length; i++)
        {
          if (nums[i] > first) // condition 1
          {
              third = second;
              second = first;
              first = nums[i];
          }
          else if (first > nums[i] && nums[i] > second) // condition 2
          {
              third = second;
              second = nums[i];
          }
          else if (second > nums[i] && nums[i] > third) // condition 3
          {
              third = nums[i];
          }
        }
        return (third == Integer.MIN_VALUE || third == second)? first: third;
    }
}

problem2: input: [1,2,-2147483648]; expected answer: -2147483648; my answer: 2
why： I think the problem is result of Integer.MIN_VALUE (-2147483648)
let me analyse it:
first iteration: [1, min, min] 
second iteration: [2, 1, min]
third iteration:［2, 1, min］
in return: third == Integer.MIN_VALUE 
so code depends on the special initialazation
solution: initialaze the first, second, third as null; but the code will be a bit more hard to understand

cited from: https://discuss.leetcode.com/topic/63715/java-neat-and-easy-understand-solution-o-n-time-o-1-space
by yuxiaofei2016

code:
    public int thirdMax(int[] nums) {
        Integer max1 = null;
        Integer max2 = null;
        Integer max3 = null;
        for (Integer n : nums) {
            if (n.equals(max1) || n.equals(max2) || n.equals(max3)) continue;
            if (max1 == null || n > max1) {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (max2 == null || n > max2) {
                max3 = max2;
                max2 = n;
            } else if (max3 == null || n > max3) {
                max3 = n;
            }
        }
        return max3 == null ? max1 : max3;
    }
            
python code: cited from: http://bookshadow.com/weblog/2016/10/09/leetcode-third-maximum-number/

class Solution(object):
    def thirdMax(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        a = b = c = None
        for n in nums:
            if n > a:
                a, b, c = n, a, b
            elif a > n > b:
                b, c = n, b
            elif b > n > c:
                c = n
        return c if c is not None else a



