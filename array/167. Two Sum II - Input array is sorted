Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.
The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2

idea: if the hashtable is applied the problem, will be very easy, but it requires o(n) in space;
      Besides, in this problem, we should find that the numbers are sorted, so we may apply some
      tips on the indices.

public class Solution 
{
    public int[] twoSum(int[] numbers, int target) 
    {
        // error input elimination
        if (numbers == null || numbers.length < 1) return null;
        
        // find the indice, use while loop in place of for loop, which is more flexible
        int i=0, j=numbers.length-1; 
        // since the numbers are sorted, adjusting the indices from the [start,end] may achieve the requirement 
        while (i<j)
        {
            int x = numbers[i] + numbers[j];
            if (x < target)
            i++;
            else if (x > target)
            j--;
            else return new int[] {i+1,j+1}; // ??????
        }
        
        // find none
        return null;
    }
}
// method above requires o(1) in  space, o(n) in time
// hashmap requires o(n) in space, o(n) in time



